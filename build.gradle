plugins {
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
	id 'org.spongepowered.mixin' version '0.7+'
}

jarJar.enable()

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

base {
	archivesName = project.archives_base_name
}
version = project.mod_version
group = project.maven_group

minecraft {
	mappings channel: 'parchment', version: parchment_version

	runs {
		configureEach {
			copyIdeResources = true

			workingDirectory project.file('run')
			arg "-mixin.config=styledplayerlist.mixins.json"
			jvmArg '-Dmixin.env.disableRefMap=true'

			property 'forge.logging.console.level', 'info'

			mods {
				styledplayerlist {
					source sourceSets.main
				}
			}
		}

		client {
			taskName 'runClient'
		}

		server {
			taskName 'runServer'
		}
	}
}

repositories {
	maven { url = "https://maven.tterrag.com/" }
	mavenLocal()
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	jarJar(implementation(fg.deobf("eu.pb4:placeholder-api:$placeholder_api_version")))

	if (System.getProperty("idea.sync.active") != "true") {
		annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	}
}

tasks.named('jar', Jar).configure {
	archiveClassifier = 'slim'
	finalizedBy 'reobfJar'

	manifest {
		attributes([
				"Specification-Title"     : project.name,
				"Specification-Vendor"    : "Patbox",
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : archiveVersion,
				"Implementation-Vendor"   : "Patbox",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"MixinConfigs"            : "styledplayerlist.mixins.json"
		])
	}
}

tasks.named('jarJar').configure {
	archiveClassifier = ''
	finalizedBy 'reobfJarJar'
}

reobf {
	jarJar { }
}

task sourceJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.java
}

tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
			mod_version: project.version,
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

mixin {
	add sourceSets.main, "styledplayerlist.refmap.json"
}

publishing {
	tasks.publish.dependsOn 'build'
	publications {
		mavenJava(MavenPublication) {
			artifact sourceJar
		}
	}

	repositories {
		if (project.hasProperty('mavendir')) {
			maven { url mavendir }
		}
	}
}
